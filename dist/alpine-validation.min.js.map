{"version":3,"file":"alpine-validation.min.js","sources":["../src/global-validation.js","../src/local-validation.js","../builds/cdn.js"],"sourcesContent":["function bindComponent(el, Alpine) {\n    Alpine.bind(el, {\n        'x-data'() {\n            return {\n                wireId: null,\n                init() {\n                    // Get the wire:id attribute - In cases where the Alpine component\n                    // is not on the root of the Livewire element we will search\n                    // for the closest one and track that\n                    this.wireId = this.$el.__livewire.id ?? Alpine.findClosest(el, i => i.__livewire.id);\n                },\n                get errors() {\n                    return this.$store.validationErrors.__errors[this.wireId] ?? []\n                },\n                get models() {\n                    let errorList = [];\n\n                    for(const model of this.$store.validationErrors.getWireModels(this.wireId)) {\n                        errorList.push({\n                            name: model,\n                            errors: this.$store.validationErrors.getErrorMessages(this.wireId, model)\n                        })\n                    }\n                    return errorList;\n                },\n                messages(model, wildcard) {\n                    if(wildcard) {\n                        let messages = [];\n                        let modelPrefix = model.split('*')[0];\n                        let models = this.models.filter(model => model.name.startsWith(modelPrefix))\n\n                        for(const model of models) {\n                            messages.push(...model.errors)\n                        }\n\n                        return messages;\n                    }\n                    return this.$store.validationErrors.getErrorMessages(this.wireId, model)\n                }\n            }\n        }\n    })\n}\n\nfunction initErrorStore(Alpine) {\n    Alpine.store('validationErrors', {\n        __errors: {},\n        init() {\n            console.info(\"Validation store initialized\")\n            // Hook the component message from the server after the DOM is finished updating\n            Livewire.hook('message.processed', (message, component) => {\n                this.__errors[message.component.id] = message.response.serverMemo.errors\n            })\n        },\n        get components() {\n            return Object.keys(this.__errors).filter(model => Object.values(this.__errors[model]).length > 0)\n        },\n        getWireModels(component) {\n            return Object.keys(this.__errors[component] ?? [])\n        },\n        getErrorMessages(component, model) {\n            if(!this.__errors[component]) {\n                return []\n            }\n            return this.__errors[component][model] ?? []\n        },\n        hasValidationErrors(component, model) {\n            return this.getErrorMessages(component, model).length > 0 ?? false\n        }\n    })\n\n    return true\n}\n\nexport default function (Alpine) {\n    // Safely register the error store\n    if(!initErrorStore(Alpine)) {\n        console.warn(\"Reinitialization of error store\")\n    }\n\n    Alpine.directive('share-validation', (el, { modifiers }, { Alpine }) => {\n        bindComponent(el, Alpine)\n    }).before('bind')\n\n    Alpine.magic('errors', (el, { Alpine }) => model => {\n        return Alpine.$data(el).messages(model, model.endsWith('*'));\n    })\n\n    Alpine.magic('hasError', (el, { Alpine }) => model => {\n        let state = Alpine.$data(el).models.find(x => x.name === model);\n        return state ? state.errors.length > 0 : false;\n    })\n}","function bindComponent(el, Alpine) {\n    Alpine.bind(el, {\n        'x-data'() {\n            return {\n                __component: 'localValidation',\n                errors: [],\n                models: [],\n                processValidation(errors) {\n                    this.errors = errors;\n                    this.models = Object.keys(errors);\n                },\n                errorsFor(model) {\n                    if(model.includes('*')) {\n                        let models = this.wildcardModelSearch(model);\n                        let errors = [];\n\n                        for(let result of models) {\n                            errors.push(...this.errors[result])\n                        }\n                        return errors;\n                    }\n                    return this.errors[model] ?? [];\n                },\n                hasErrors(model) {\n                    return this.errorsFor(model).length > 0 ?? false;\n                },\n                wildcardModelSearch(term) {\n                    let rx = new RegExp(term.replaceAll('*', '.*'))\n                    return this.models.filter(model => rx.test(model));\n                }\n            }\n        }\n    })\n}\n\nexport default function (Alpine) {\n    // Ensure the hook is loaded on every page\n    document.addEventListener(\"DOMContentLoaded\", () => {\n        Livewire.hook('message.processed', (message, component) => {\n            let alpineComponent = Alpine.$data(component.el);\n\n            // Make sure we aren't going to call an invalid alpine component\n            if(alpineComponent.__component === 'localValidation') {\n                alpineComponent.processValidation(message.response.serverMemo.errors);\n            }\n        })\n    });\n\n    Alpine.directive('validation', (el, { modifiers }, { Alpine }) => {\n        bindComponent(el, Alpine);\n    }).before('bind')\n}","import { localValidation, globalValidation } from '../src/index.js';\n\ndocument.addEventListener('alpine:init', () => {\n    localValidation(window.Alpine);\n    globalValidation(window.Alpine);\n});"],"names":["globalValidation","Alpine","store","__errors","init","console","info","Livewire","hook","message","component","this","id","response","serverMemo","errors","components","Object","keys","filter","model","values","length","getWireModels","getErrorMessages","hasValidationErrors","initErrorStore","directive","el","modifiers","bind","x-data","wireId","$el","__livewire","findClosest","i","$store","validationErrors","models","errorList","push","name","messages","wildcard","modelPrefix","split","startsWith","bindComponent","before","magic","$data","endsWith","state","find","x","localValidation","document","addEventListener","alpineComponent","__component","processValidation","errorsFor","includes","wildcardModelSearch","result","hasErrors","term","rx","RegExp","replaceAll","test","window"],"mappings":"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"}