{"version":3,"file":"alpine-validation.js","sources":["../src/global-validation.js","../src/local-validation.js","../builds/cdn.js"],"sourcesContent":["function bindComponent(el, Alpine) {\n    Alpine.bind(el, {\n        'x-data'() {\n            return {\n                wireId: null,\n                init() {\n                    // Get the wire:id attribute - In cases where the Alpine component\n                    // is not on the root of the Livewire element we will search\n                    // for the closest one and track that\n                    this.wireId = this.$el.__livewire.id ?? Alpine.findClosest(el, i => i.__livewire.id);\n                },\n                get errors() {\n                    return this.$store.validationErrors.__errors[this.wireId] ?? []\n                },\n                get models() {\n                    let errorList = [];\n\n                    for(const model of this.$store.validationErrors.getWireModels(this.wireId)) {\n                        errorList.push({\n                            name: model,\n                            errors: this.$store.validationErrors.getErrorMessages(this.wireId, model)\n                        })\n                    }\n                    return errorList;\n                },\n                messages(model, wildcard) {\n                    if(wildcard) {\n                        let messages = [];\n                        let modelPrefix = model.split('*')[0];\n                        let models = this.models.filter(model => model.name.startsWith(modelPrefix))\n\n                        for(const model of models) {\n                            messages.push(...model.errors)\n                        }\n\n                        return messages;\n                    }\n                    return this.$store.validationErrors.getErrorMessages(this.wireId, model)\n                }\n            }\n        }\n    })\n}\n\nfunction initErrorStore(Alpine) {\n    Alpine.store('validationErrors', {\n        __errors: {},\n        init() {\n            console.info(\"Validation store initialized\")\n            // Hook the component message from the server after the DOM is finished updating\n            Livewire.hook('message.processed', (message, component) => {\n                this.__errors[message.component.id] = message.response.serverMemo.errors\n            })\n        },\n        get components() {\n            return Object.keys(this.__errors).filter(model => Object.values(this.__errors[model]).length > 0)\n        },\n        getWireModels(component) {\n            return Object.keys(this.__errors[component] ?? [])\n        },\n        getErrorMessages(component, model) {\n            if(!this.__errors[component]) {\n                return []\n            }\n            return this.__errors[component][model] ?? []\n        },\n        hasValidationErrors(component, model) {\n            return this.getErrorMessages(component, model).length > 0 ?? false\n        }\n    })\n\n    return true\n}\n\nexport default function (Alpine) {\n    // Safely register the error store\n    if(!initErrorStore(Alpine)) {\n        console.warn(\"Reinitialization of error store\")\n    }\n\n    Alpine.directive('share-validation', (el, { modifiers }, { Alpine }) => {\n        bindComponent(el, Alpine)\n    }).before('bind')\n\n    Alpine.magic('errors', (el, { Alpine }) => model => {\n        return Alpine.$data(el).messages(model, model.endsWith('*'));\n    })\n\n    Alpine.magic('hasError', (el, { Alpine }) => model => {\n        let state = Alpine.$data(el).models.find(x => x.name === model);\n        return state ? state.errors.length > 0 : false;\n    })\n}","function bindComponent(el, Alpine) {\n    Alpine.bind(el, {\n        'x-data'() {\n            return {\n                __component: 'localValidation',\n                errors: [],\n                models: [],\n                processValidation(errors) {\n                    this.errors = errors;\n                    this.models = Object.keys(errors);\n                },\n                errorsFor(model) {\n                    if(model.includes('*')) {\n                        let models = this.wildcardModelSearch(model);\n                        let errors = [];\n\n                        for(let result of models) {\n                            errors.push(...this.errors[result])\n                        }\n                        return errors;\n                    }\n                    return this.errors[model] ?? [];\n                },\n                hasErrors(model) {\n                    return this.errorsFor(model).length > 0 ?? false;\n                },\n                wildcardModelSearch(term) {\n                    let rx = new RegExp(term.replaceAll('*', '.*'))\n                    return this.models.filter(model => rx.test(model));\n                }\n            }\n        }\n    })\n}\n\nexport default function (Alpine) {\n    // Ensure the hook is loaded on every page\n    document.addEventListener(\"DOMContentLoaded\", () => {\n        Livewire.hook('message.processed', (message, component) => {\n            let alpineComponent = Alpine.$data(component.el);\n\n            // Make sure we aren't going to call an invalid alpine component\n            if(alpineComponent.__component === 'localValidation') {\n                alpineComponent.processValidation(message.response.serverMemo.errors);\n            }\n        })\n    });\n\n    Alpine.directive('validation', (el, { modifiers }, { Alpine }) => {\n        bindComponent(el, Alpine);\n    }).before('bind')\n}","import { localValidation, globalValidation } from '../src/index.js';\n\ndocument.addEventListener('alpine:init', () => {\n    localValidation(window.Alpine);\n    globalValidation(window.Alpine);\n});"],"names":["bindComponent","el","Alpine","bind","x-data","wireId","init","$el","__livewire","id","findClosest","i","errors","$store","validationErrors","__errors","models","errorList","model","getWireModels","push","name","getErrorMessages","messages","wildcard","modelPrefix","split","filter","startsWith","initErrorStore","store","console","info","Livewire","hook","message","component","response","serverMemo","components","Object","keys","values","length","hasValidationErrors","directive","modifiers","before","magic","$data","endsWith","state","find","x","__component","processValidation","errorsFor","includes","wildcardModelSearch","result","hasErrors","term","rx","RegExp","replaceAll","test","document","addEventListener","alpineComponent","localValidation","window","globalValidation"],"mappings":"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"}